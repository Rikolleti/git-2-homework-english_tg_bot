import random
import configparser
import db
import telebot
from telebot import types
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage

state_storage = StateMemoryStorage()

config = configparser.ConfigParser()
config.read("settings.ini")
token_tg = config["Telegram"]["token_tg"].strip()

TOKEN = token_tg
bot = telebot.TeleBot(TOKEN, state_storage=state_storage)


class Command:
    START = "–ù–∞—á–∞—Ç—å üöÄ"
    ADD_WORD = "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï"
    DELETE_WORD = "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô"
    NEXT = "–î–∞–ª—å—à–µ ‚è≠"
    HELP = "–ü–æ–º–æ—â—åÔ∏è ‚ÑπÔ∏è"


class MyStates(StatesGroup):
    title = State()
    translate = State()
    other_words = State()


def from_db(user_id):
    words = db.show_words(user_id)
    return words


def count(user_id):
    count_words = db.count_words(user_id)
    return count_words


def delete_word_from_db(translate, user_id):
    res = db.delete_word(translate, user_id)
    return res


def insert_words(title, translate, user_id):
    res = db.insert_words_from_user(title, translate, user_id)
    return res


# HELP
@bot.message_handler(func=lambda message: message.text == Command.HELP)
def help_command(message):
    help_text = """
    ü§ñ **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:**

    - *–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï*: –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ –≤–∞—à —Å–ª–æ–≤–∞—Ä—å.
    - *–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô*: –£–¥–∞–ª–∏—Ç–µ —Å–ª–æ–≤–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è.
    - *–î–∞–ª—å—à–µ ‚è≠*: –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É.
    - *–ü–æ–º–æ—â—å ‚ÑπÔ∏è*: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.
    """
    bot.send_message(message.chat.id, help_text, parse_mode="Markdown")


# –í–´–í–û–î –°–õ–û–í
@bot.message_handler(commands=["cards", "start"])
def create_cards(message):
    user = message.from_user
    greeting = (
        f"üåü –ü—Ä–∏–≤–µ—Ç, {user.first_name}! üåü\n\n"
        f"–†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –∑–¥–µ—Å—å! üéâ\n"
        f"–Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. üìö\n\n"
        f"–° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã —Å–º–æ–∂–µ—à—å:\n"
        f"‚úÖ –£—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞\n"
        f"‚úÖ –ü—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –∏—Ö –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ\n\n"
        f"–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –¢–æ–≥–¥–∞ –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å' –Ω–∏–∂–µ! üëá"
    )
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    start_btn = types.KeyboardButton(Command.START)
    markup.add(start_btn)
    bot.send_message(message.chat.id, greeting, reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == Command.START)
def start(message):
    user = message.from_user
    show_card(message, user.id, 0)


def show_card(message, user_id, current_index):
    words = from_db(user_id)
    if not words:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤.")
        return

    if current_index < len(words):
        word = words[current_index]
        title = word[1]
        translate = word[0]
        all_translations = [w[0] for w in words if w[0] != translate]
        random_translations = random.sample(all_translations, 3) + [translate]
        random.shuffle(random_translations)

        buttons = [types.KeyboardButton(option) for option in random_translations]
        next_btn = types.KeyboardButton(Command.NEXT)
        add_word_btn = types.KeyboardButton(Command.ADD_WORD)
        delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
        help_btn = types.KeyboardButton(Command.HELP)
        buttons.extend([next_btn, add_word_btn, delete_word_btn, help_btn])
        markup = types.ReplyKeyboardMarkup(row_width=2)
        markup.add(*buttons)

        choose = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {title}"
        bot.send_message(message.chat.id, choose, reply_markup=markup)
        bot.set_state(message.from_user.id, MyStates.title, message.chat.id)
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data["title"] = title
            data["translate"] = translate
            data["current_index"] = current_index
    else:
        bot.send_message(message.chat.id, "–¢—ã –≤—ã—É—á–∏–ª –≤—Å–µ —Å–ª–æ–≤–∞ !", reply_markup=telebot.types.ReplyKeyboardRemove())


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    user = message.from_user
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        current_index = data.get("current_index", 0) + 1
    show_card(message, user.id, current_index)


# –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–õ–û–í
@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:")
    bot.register_next_step_handler(message, process_title)


def process_title(message):
    title = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π:")
    bot.register_next_step_handler(message, process_translate, title)


def process_translate(message, title):
    translate = message.text
    user_id = message.from_user.id
    insert_words(title, translate, user_id)
    bot.send_message(message.chat.id, "–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    from_db(user_id)
    res = count(user_id)
    bot.send_message(message.chat.id, f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {res} ü§©")


# –£–î–ê–õ–ï–ù–ò–ï –°–õ–û–í
@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    bot.register_next_step_handler(message, process_delete_word)


def process_delete_word(message):
    translate = message.text
    user_id = message.from_user.id
    res = delete_word_from_db(translate, user_id)
    count_words = count(user_id)
    success_output = f"–°–ª–æ–≤–æ '{translate}' —É–¥–∞–ª–µ–Ω–æ."
    failed_output = f"–°–ª–æ–≤–æ '{translate}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –∏–ª–∏ –Ω–µ —Å–≤—è–∑–∞–Ω–æ —Å –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º."
    info = f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {count_words} ü§©"
    if res:
        bot.send_message(message.chat.id, success_output)
        bot.send_message(message.chat.id, info)
    else:
        bot.send_message(message.chat.id, failed_output)
    from_db(user_id)


# –ü–†–û–í–ï–†–ö–ê –ù–ê –ö–û–†–†–ï–ö–¢–ù–û–°–¢–¨ –û–¢–í–ï–¢–ê
@bot.message_handler(func=lambda message: True)
def message_reply(message):
    success_messages = [
        "–û—Ç–ª–∏—á–Ω–æ, —Ç—ã –º–æ–ª–æ–¥–µ—Ü! üòç",
        "–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üòç",
        "–°—É–ø–µ—Ä! –¢—ã —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è! üéâ",
        "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™",
    ]

    failed_messages = [
        "–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑. üòä",
        "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —Ç—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏! üí™",
        "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, —É —Ç–µ–±—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—Å—è! üòâ",
        "–û—à–∏–±–∫–∞ ‚Äî —ç—Ç–æ —á–∞—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞! üåü",
    ]

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        translate = data.get("translate")
    if message.text == translate:
        bot.send_message(message.chat.id, random.choice(success_messages))
        next_cards(message)
    else:
        bot.send_message(message.chat.id, random.choice(failed_messages))


################MAIN################
if __name__ == "__main__":
    print("Bot is running")
    bot.polling(none_stop=True)
